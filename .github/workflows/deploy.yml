---
name: CI Workflow with Bandit, Terraform, and TFSec

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  bandit-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit
        run: bandit -r . -o bandit_report.txt -f txt

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit_report.txt

      - name: Display Bandit Report
        run: cat bandit_report.txt

  terraform-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Initialize Terraform
        run: terraform init

      - name: Validate Terraform
        run: terraform validate

      - name: Format Terraform
        run: terraform fmt -check

      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          tfsec_args: --soft-fail
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: YAML Lint
        uses: karancode/yamllint-github-action@master

  tag-commit:
    runs-on: ubuntu-latest
    needs: [bandit-check, terraform-check]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Git
        run: |
          git config --global user.name "${GITHUB_USER_NAME}"
          git config --global user.email "${GITHUB_USER_EMAIL}"

      - name: Fetch tags
        run: git fetch --tags

      - name: Get current version
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Current version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Calculate the next version
        id: increment_version
        run: |
          VERSION=${{ env.VERSION }}
          IFS='.' read -r -a VERSION_PARTS <<< "${VERSION#v}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          echo "Parsed version parts: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
          MAJOR=$((MAJOR))
          MINOR=$((MINOR))
          PATCH=$((PATCH))
          generate_new_version() {
            while git rev-parse "v${MAJOR}.${MINOR}.${PATCH}" >/dev/null 2>&1; do
              echo "Tag v${MAJOR}.${MINOR}.${PATCH} already exists. Incrementing the version..."
              PATCH=$((PATCH + 1))
              if [ "$PATCH" -ge 100 ]; then
                PATCH=0
                MINOR=$((MINOR + 1))
              fi
            done
          }
          PATCH=$((PATCH + 1))
          generate_new_version
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION=${{ env.NEW_VERSION }}
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

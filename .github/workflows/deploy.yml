name: Tag Commits with Version

on:
  push:
    branches:
      - master # Define the branches to monitor

jobs:
  tag-commit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config user.name "${{ secrets.GIT_USER_NAME }}"
          git config user.email "${{ secrets.GIT_USER_EMAIL }}"

      - name: Determine Latest Tag
        id: get-latest-tag
        run: |
          echo "Fetching the latest tag from the repository..."
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Fetched latest tag: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Calculate New Version
        id: calculate-version
        run: |
          LATEST_TAG="${{ steps.get-latest-tag.outputs.LATEST_TAG }}"
          echo "Latest Tag: $LATEST_TAG"

          # Extract the major, minor, and patch parts of the latest version
          IFS='.' read -r -a VERSION_PARTS <<< "${LATEST_TAG#v}"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # Function to generate a new version
          function generate_new_version {
            while git rev-parse "v${MAJOR}.${MINOR}.${PATCH}" >/dev/null 2>&1; do
              echo "Tag v${MAJOR}.${MINOR}.${PATCH} already exists. Incrementing..."
              PATCH=$((PATCH + 1))
              if [ "$PATCH" -ge 10 ]; then
                PATCH=0
                MINOR=$((MINOR + 1))
              fi
            done
            echo "New Version: v${MAJOR}.${MINOR}.${PATCH}"
          }

          # Generate the new version tag
          PATCH=$((PATCH + 1))
          generate_new_version
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create and Push New Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ env.NEW_VERSION }}
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: "Release for commit ${{ steps.get-latest-tag.outputs.LATEST_TAG }}"
          body: "This release includes the following commit: ${{ steps.get-latest-tag.outputs.LATEST_TAG }}"
          draft: false
          prerelease: false

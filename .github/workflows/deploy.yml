name: Tag Commits with Version

on:
  push:
    branches:
      - master # Branch to monitor for changes

jobs:
  tag-commit:
    runs-on: ubuntu-24.04

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true  

      # Step 2: Configure Git user information
      - name: Set Up Git
        run: |
          git config user.name "${{ secrets.GIT_USER_NAME }}"
          git config user.email "${{ secrets.GIT_USER_EMAIL }}"

      # Step 3: Fetch all tags
      - name: Fetch Tags
        run: git fetch --tags

      # Step 4: Determine the latest tag
      - name: Determine Latest Tag
        id: get-latest-tag
        run: |
          # Get the latest tag, or use v0.0.0 as default if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      # Step 5: Calculate the next version
      - name: Calculate New Version
        id: calculate-version
        run: |
          # Extract major, minor, and patch components from the latest tag
          IFS='.' read -r -a VERSION_PARTS <<< "${LATEST_TAG#v}"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # Increment the desired version part
          #PATCH=$((PATCH + 1)) # Example: Increment patch version
          # Uncomment below for other increments
          # MINOR=$((MINOR + 1)); PATCH=0  # Reset patch if minor incremented
          MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0  # Reset minor and patch if major incremented

          # Construct the new version
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # Step 6: Create and push the new tag
      - name: Create and Push New Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ env.NEW_VERSION }}
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          # Verify if the tag already exists in the remote repository #
          if git ls-remote --tags origin | grep -q "refs/tags/$NEW_VERSION"; then
            echo "Tag $NEW_VERSION already exists. Skipping creation."
            exit 0
          fi

          # Create and push the new tag
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"

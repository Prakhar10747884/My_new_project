name: Tag Commits with Version

on:
  push:
    branches:
      - master # Define the branches to monitor

jobs:
  tag-commit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config user.name "${{ secrets.GIT_USER_NAME }}"
          git config user.email "${{ secrets.GIT_USER_EMAIL }}"

      - name: Determine Latest Tag
        id: get-latest-tag
        run: |
          echo "Fetching the latest tag from the repository..."
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Fetched latest tag: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Calculate New Version
        id: calculate-version
        run: |
          LATEST_TAG=${{ steps.get-latest-tag.outputs.LATEST_TAG }}
          IFS='.' read -r -a VERSION_PARTS <<< "${LATEST_TAG#v}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment the patch version
          PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"

          # Loop to check if the tag exists and increment the minor version if it does
          while git rev-parse "$NEW_VERSION" >/dev/null 2>&1; do
            echo "Tag $NEW_VERSION already exists. Incrementing the minor version..."
            MINOR=$((MINOR + 1))
            PATCH=0
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          done

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create and Push New Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ env.NEW_VERSION }}
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: "Release for commit ${{ steps.get-latest-tag.outputs.LATEST_TAG }}"
          body: "This release includes the following commit: ${{ steps.get-latest-tag.outputs.LATEST_TAG }}"
          draft: false
          prerelease: false
